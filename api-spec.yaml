openapi: 3.0.3
info:
  title: Electric Circuit Web API
  description: |
    전자 회로 설계 웹 애플리케이션을 위한 RESTful API
    
    Clean Architecture 패턴으로 구성되어 있으며, Firebase를 백엔드 서비스로 사용합니다.
    
    ## 인증
    대부분의 API는 Firebase ID Token을 통한 인증이 필요합니다.
    
    ## 주요 기능
    - 프로젝트 관리 (생성, 조회, 수정, 삭제)
    - 회로 설계 (생성, 편집, 저장)
    - 파일 스토리지 (이미지, 문서 업로드)
    - 사용자 인증 및 권한 관리
    
  version: "1.0.0"
  contact:
    name: Electric Circuit Web
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api
    description: 로컬 개발 서버
  - url: https://api.electric-circuit-web.com/api
    description: 프로덕션 서버

security:
  - FirebaseAuth: []

paths:
  # 시스템 API
  /health:
    get:
      tags:
        - System
      summary: 헬스 체크
      description: 서버 상태를 확인합니다
      security: []
      responses:
        '200':
          description: 서버 정상
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"

  # 인증 API
  /auth/verify:
    post:
      tags:
        - Authentication
      summary: 토큰 검증
      description: Firebase ID 토큰을 검증합니다
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
      responses:
        '200':
          description: 토큰 검증 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/create-user:
    post:
      tags:
        - Authentication
      summary: 사용자 생성
      description: 새로운 사용자를 생성합니다
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: 사용자 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/get-user:
    get:
      tags:
        - Authentication
      summary: 사용자 정보 조회
      description: 사용자 정보를 조회합니다
      parameters:
        - in: query
          name: uid
          required: true
          schema:
            type: string
          description: 사용자 ID
      responses:
        '200':
          description: 사용자 정보 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/update-user:
    put:
      tags:
        - Authentication
      summary: 사용자 정보 수정
      description: 사용자 정보를 수정합니다
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: 사용자 정보 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /auth/delete-user:
    delete:
      tags:
        - Authentication
      summary: 사용자 삭제
      description: 사용자를 삭제합니다
      parameters:
        - in: query
          name: uid
          required: true
          schema:
            type: string
          description: 삭제할 사용자 ID
      responses:
        '200':
          description: 사용자 삭제 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # 프로젝트 API
  /projects:
    get:
      tags:
        - Projects
      summary: 프로젝트 목록 조회
      description: 사용자의 모든 프로젝트를 조회합니다
      responses:
        '200':
          description: 프로젝트 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'

  /projects/create:
    post:
      tags:
        - Projects
      summary: 프로젝트 생성
      description: 새로운 프로젝트를 생성합니다
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          description: 프로젝트 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'

  /projects/get:
    get:
      tags:
        - Projects
      summary: 프로젝트 상세 조회
      description: 특정 프로젝트의 상세 정보를 조회합니다
      parameters:
        - in: query
          name: projectId
          required: true
          schema:
            type: string
          description: 프로젝트 ID
      responses:
        '200':
          description: 프로젝트 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'

  /projects/update:
    put:
      tags:
        - Projects
      summary: 프로젝트 수정
      description: 프로젝트 정보를 수정합니다
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        '200':
          description: 프로젝트 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'

  /projects/delete:
    delete:
      tags:
        - Projects
      summary: 프로젝트 삭제
      description: 프로젝트를 삭제합니다
      parameters:
        - in: query
          name: projectId
          required: true
          schema:
            type: string
          description: 삭제할 프로젝트 ID
      responses:
        '200':
          description: 프로젝트 삭제 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /projects/duplicate:
    post:
      tags:
        - Projects
      summary: 프로젝트 복제
      description: 기존 프로젝트를 복제합니다
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DuplicateProjectRequest'
      responses:
        '201':
          description: 프로젝트 복제 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'

  # 회로 API
  /circuits:
    get:
      tags:
        - Circuits
      summary: 프로젝트 회로 목록 조회
      description: 특정 프로젝트의 모든 회로를 조회합니다
      parameters:
        - in: query
          name: projectId
          required: true
          schema:
            type: string
          description: 프로젝트 ID
      responses:
        '200':
          description: 회로 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CircuitListResponse'

  /circuits/create:
    post:
      tags:
        - Circuits
      summary: 회로 생성
      description: 새로운 회로를 생성합니다
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCircuitRequest'
      responses:
        '201':
          description: 회로 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CircuitResponse'

  /circuits/get:
    get:
      tags:
        - Circuits
      summary: 회로 상세 조회
      description: 특정 회로의 상세 정보를 조회합니다
      parameters:
        - in: query
          name: circuitId
          required: true
          schema:
            type: string
          description: 회로 ID
      responses:
        '200':
          description: 회로 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CircuitResponse'

  /circuits/update:
    put:
      tags:
        - Circuits
      summary: 회로 수정
      description: 회로 정보 및 설계 데이터를 수정합니다
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCircuitRequest'
      responses:
        '200':
          description: 회로 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CircuitResponse'

  /circuits/delete:
    delete:
      tags:
        - Circuits
      summary: 회로 삭제
      description: 회로를 삭제합니다
      parameters:
        - in: query
          name: circuitId
          required: true
          schema:
            type: string
          description: 삭제할 회로 ID
      responses:
        '200':
          description: 회로 삭제 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /circuits/templates:
    get:
      tags:
        - Circuits
      summary: 회로 템플릿 목록 조회
      description: 사용 가능한 회로 템플릿을 조회합니다
      responses:
        '200':
          description: 템플릿 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateListResponse'

  # 스토리지 API
  /storage/upload:
    post:
      tags:
        - Storage
      summary: 파일 업로드
      description: 파일을 서버에 업로드합니다
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: 업로드할 파일
                folder:
                  type: string
                  description: 저장할 폴더명
              required:
                - file
      responses:
        '200':
          description: 파일 업로드 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageResponse'

  /storage/url:
    get:
      tags:
        - Storage
      summary: 파일 URL 조회
      description: 저장된 파일의 다운로드 URL을 조회합니다
      parameters:
        - in: query
          name: filePath
          required: true
          schema:
            type: string
          description: 파일 경로
      responses:
        '200':
          description: 파일 URL 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageResponse'

  /storage/delete:
    delete:
      tags:
        - Storage
      summary: 파일 삭제
      description: 저장된 파일을 삭제합니다
      parameters:
        - in: query
          name: filePath
          required: true
          schema:
            type: string
          description: 삭제할 파일 경로
      responses:
        '200':
          description: 파일 삭제 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

components:
  securitySchemes:
    FirebaseAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Firebase ID Token

  schemas:
    # 공통 응답 스키마
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "작업이 성공적으로 완료되었습니다"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "에러 메시지"
        message:
          type: string
          example: "추가 설명"

    # 인증 관련 스키마
    TokenVerifyRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: Firebase ID Token
          example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."

    CreateUserRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          minLength: 6
          example: "password123"
        display_name:
          type: string
          example: "홍길동"
        photo_url:
          type: string
          format: uri
          example: "https://example.com/photo.jpg"

    UpdateUserRequest:
      type: object
      properties:
        display_name:
          type: string
          example: "새로운 이름"
        photo_url:
          type: string
          format: uri
          example: "https://example.com/new-photo.jpg"

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Token verified successfully"
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          example: "firebase_token"

    User:
      type: object
      properties:
        uid:
          type: string
          example: "firebase_user_id"
        email:
          type: string
          format: email
          example: "user@example.com"
        displayName:
          type: string
          example: "홍길동"
        photoURL:
          type: string
          format: uri
          example: "https://example.com/photo.jpg"
        emailVerified:
          type: boolean
          example: true

    # 프로젝트 관련 스키마
    CreateProjectRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "LED 회로 설계"
        description:
          type: string
          example: "기본적인 LED 회로 설계 프로젝트"

    UpdateProjectRequest:
      type: object
      required:
        - project_id
      properties:
        project_id:
          type: string
          example: "project_123"
        name:
          type: string
          example: "수정된 프로젝트 이름"
        description:
          type: string
          example: "수정된 설명"

    DuplicateProjectRequest:
      type: object
      required:
        - project_id
        - name
      properties:
        project_id:
          type: string
          example: "original_project_id"
        name:
          type: string
          example: "복제된 프로젝트"

    Project:
      type: object
      properties:
        id:
          type: string
          example: "project_123"
        name:
          type: string
          example: "LED 회로 설계"
        description:
          type: string
          example: "기본적인 LED 회로 설계 프로젝트"
        user_id:
          type: string
          example: "user_123"
        status:
          type: string
          enum: [active, archived, deleted]
          example: "active"
        settings:
          type: object
          example: 
            grid_size: 10
            snap_to_grid: true
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-16T14:20:00Z"

    ProjectResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Project retrieved successfully"
        project:
          $ref: '#/components/schemas/Project'

    ProjectListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Projects retrieved successfully"
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'

    # 회로 관련 스키마
    CreateCircuitRequest:
      type: object
      required:
        - project_id
        - name
      properties:
        project_id:
          type: string
          example: "project_123"
        name:
          type: string
          example: "메인 회로"
        description:
          type: string
          example: "프로젝트의 주요 회로"
        data:
          $ref: '#/components/schemas/CircuitData'

    UpdateCircuitRequest:
      type: object
      required:
        - circuit_id
      properties:
        circuit_id:
          type: string
          example: "circuit_123"
        name:
          type: string
          example: "수정된 회로"
        description:
          type: string
          example: "수정된 설명"
        data:
          $ref: '#/components/schemas/CircuitData'

    CircuitData:
      type: object
      properties:
        elements:
          type: array
          items:
            $ref: '#/components/schemas/CircuitElement'
        connections:
          type: array
          items:
            $ref: '#/components/schemas/CircuitConnection'

    CircuitElement:
      type: object
      properties:
        id:
          type: string
          example: "R1"
        type:
          type: string
          example: "resistor"
        value:
          type: string
          example: "1k"
        position:
          type: object
          properties:
            x:
              type: number
              example: 100
            y:
              type: number
              example: 100

    CircuitConnection:
      type: object
      properties:
        from:
          type: string
          example: "R1.pin2"
        to:
          type: string
          example: "LED1.pin1"

    Circuit:
      type: object
      properties:
        id:
          type: string
          example: "circuit_123"
        name:
          type: string
          example: "메인 회로"
        description:
          type: string
          example: "프로젝트의 주요 회로"
        project_id:
          type: string
          example: "project_123"
        user_id:
          type: string
          example: "user_123"
        data:
          $ref: '#/components/schemas/CircuitData'
        version:
          type: integer
          example: 1
        is_template:
          type: boolean
          example: false
        tags:
          type: array
          items:
            type: string
          example: ["led", "resistor"]
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T11:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-16T15:30:00Z"

    CircuitResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Circuit retrieved successfully"
        circuit:
          $ref: '#/components/schemas/Circuit'

    CircuitListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Circuits retrieved successfully"
        circuits:
          type: array
          items:
            $ref: '#/components/schemas/Circuit'

    TemplateListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Templates feature not yet implemented"
        templates:
          type: array
          items:
            type: object

    # 스토리지 관련 스키마
    StorageResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "File uploaded successfully"
        download_url:
          type: string
          format: uri
          example: "https://storage.example.com/files/file_id"
        file_path:
          type: string
          example: "/uploads/user_id/filename.ext"
        file_name:
          type: string
          example: "filename.ext"
        size:
          type: integer
          example: 1024
        files:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: "circuit_image.png"
              path:
                type: string
                example: "/uploads/user_id/circuit_image.png"
              size:
                type: integer
                example: 2048
              type:
                type: string
                example: "image/png"
              url:
                type: string
                format: uri
                example: "https://storage.example.com/files/file_id"
              created_at:
                type: string
                format: date-time
                example: "2024-01-17T15:00:00Z"

tags:
  - name: System
    description: 시스템 관련 API
  - name: Authentication
    description: 사용자 인증 관련 API
  - name: Projects
    description: 프로젝트 관리 API
  - name: Circuits
    description: 회로 설계 관리 API
  - name: Storage
    description: 파일 스토리지 API